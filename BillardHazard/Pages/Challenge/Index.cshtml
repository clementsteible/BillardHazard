@page "{gameId:guid}"
@model IndexModel

@{
    ViewData["Title"] = string.Format("Au tour de l'équipe {0} :\r\n{1}", Model.ActualTeam.Color, Model.ActualTeam.Name);
}

<h1>@ViewData["Title"]</h1>

<section class="stage">
    <figure class="ball @Model.CssBallColorClass"><span class="shadow"></span></figure>
</section>

<div id="display"></div>
<a id="btnGo"></a>

<div id="challengeState" class="challengeNotValidate">
    <span id="challengeStateDescritption">Défi non-validé</span>
</div>

<div class="container mt-5">
    <div class="row">
        <div id="oneMoreTurn" class="col-sm">
            <a>Tour supplémentaire pour l'équipe @Model.ActualTeam.Color</a>
        </div>
        <div id="nextTeamTurn" class="col-sm">
            <a>Au tour de l'équipe @Model.OpponentTeam.Color</a>
        </div>
    </div>
</div>

<script>
    window.addEventListener('load', function () {

        var display = document.getElementById("display");
        var btnGo = document.getElementById("btnGo");

        var decodedJson = decodeHtml('@Model.JsonRules');
        var rules = JSON.parse(decodedJson);

        function decodeHtml(html) {
            var txt = document.createElement("textarea");
            txt.innerHTML = html;
            return txt.value;
        }

        function WriteInDisplay(text) {
            display.innerHTML = text;
        }

        //On choisit une règle au hasard dans la liste des règles et on l'affiche
        function DisplaysRandomRule() {
            WriteInDisplay(rules[Math.floor(Math.random() * rules.length)].Explanation);
        }

        btnGo.addEventListener("click", function () { DisplaysRandomRule(); ChallengeDiceDecrease(); });
        //Afficher la rule
        DisplaysRandomRule();

        var challengeState = document.getElementById('challengeState');
        var challengeStateDescritption = document.getElementById('challengeStateDescritption');

        var anotherTurn

        var root = document.querySelector(':root');
        var challengeDiceCounter = 2;

        function ChangeChallengeValidationState() {
            if (challengeState.classList == 'challengeNotValidate') {
                challengeState.classList = 'challengeValidate';
                challengeStateDescritption.innerHTML = "Défi validé";
            }
            else {
                challengeState.classList = 'challengeNotValidate';
                challengeStateDescritption.innerHTML = "Défi non-validé";
            }
        }

        challengeState.addEventListener("click", function () { ChangeChallengeValidationState(); });

        function ChallengeDiceDecrease() {
            challengeDiceCounter--;

            let diceCode = "\"\\268" + challengeDiceCounter + "\"";

            root.style.setProperty("--dice", diceCode);

            if (challengeDiceCounter < 0) {
                btnGo.style.display = 'none';
            }
        }

        //Commandes clavier
        window.addEventListener("keydown", function (event) {

            switch (event.which) {
                //Enter
                case 13:
                    if (challengeDiceCounter > -1){
                        btnGo.click();
                    }
                    break;
                //Flèche gauche
                case 37:
                    oneMoreTurn.click();
                    break;
                //Flèche droite
                case 39:
                    nextTeamTurn.click();
                    break;
                //Espace
                case 32:
                    challengeState.click();
                    break;
            }
        });
    });
</script>